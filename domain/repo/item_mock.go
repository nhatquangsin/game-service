// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package repo

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockItemRepo creates a new instance of MockItemRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockItemRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockItemRepo {
	mock := &MockItemRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockItemRepo is an autogenerated mock type for the ItemRepo type
type MockItemRepo struct {
	mock.Mock
}

type MockItemRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockItemRepo) EXPECT() *MockItemRepo_Expecter {
	return &MockItemRepo_Expecter{mock: &_m.Mock}
}

// FindAll provides a mock function for the type MockItemRepo
func (_mock *MockItemRepo) FindAll(ctx context.Context, limit int, offset int) (*ListItemResult, error) {
	ret := _mock.Called(ctx, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 *ListItemResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) (*ListItemResult, error)); ok {
		return returnFunc(ctx, limit, offset)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) *ListItemResult); ok {
		r0 = returnFunc(ctx, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ListItemResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = returnFunc(ctx, limit, offset)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockItemRepo_FindAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAll'
type MockItemRepo_FindAll_Call struct {
	*mock.Call
}

// FindAll is a helper method to define mock.On call
//   - ctx context.Context
//   - limit int
//   - offset int
func (_e *MockItemRepo_Expecter) FindAll(ctx interface{}, limit interface{}, offset interface{}) *MockItemRepo_FindAll_Call {
	return &MockItemRepo_FindAll_Call{Call: _e.mock.On("FindAll", ctx, limit, offset)}
}

func (_c *MockItemRepo_FindAll_Call) Run(run func(ctx context.Context, limit int, offset int)) *MockItemRepo_FindAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockItemRepo_FindAll_Call) Return(listItemResult *ListItemResult, err error) *MockItemRepo_FindAll_Call {
	_c.Call.Return(listItemResult, err)
	return _c
}

func (_c *MockItemRepo_FindAll_Call) RunAndReturn(run func(ctx context.Context, limit int, offset int) (*ListItemResult, error)) *MockItemRepo_FindAll_Call {
	_c.Call.Return(run)
	return _c
}

// FindByItemIDs provides a mock function for the type MockItemRepo
func (_mock *MockItemRepo) FindByItemIDs(ctx context.Context, itemIDs []string, limit int, offset int) (*ListItemResult, error) {
	ret := _mock.Called(ctx, itemIDs, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for FindByItemIDs")
	}

	var r0 *ListItemResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []string, int, int) (*ListItemResult, error)); ok {
		return returnFunc(ctx, itemIDs, limit, offset)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []string, int, int) *ListItemResult); ok {
		r0 = returnFunc(ctx, itemIDs, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ListItemResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []string, int, int) error); ok {
		r1 = returnFunc(ctx, itemIDs, limit, offset)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockItemRepo_FindByItemIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByItemIDs'
type MockItemRepo_FindByItemIDs_Call struct {
	*mock.Call
}

// FindByItemIDs is a helper method to define mock.On call
//   - ctx context.Context
//   - itemIDs []string
//   - limit int
//   - offset int
func (_e *MockItemRepo_Expecter) FindByItemIDs(ctx interface{}, itemIDs interface{}, limit interface{}, offset interface{}) *MockItemRepo_FindByItemIDs_Call {
	return &MockItemRepo_FindByItemIDs_Call{Call: _e.mock.On("FindByItemIDs", ctx, itemIDs, limit, offset)}
}

func (_c *MockItemRepo_FindByItemIDs_Call) Run(run func(ctx context.Context, itemIDs []string, limit int, offset int)) *MockItemRepo_FindByItemIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []string
		if args[1] != nil {
			arg1 = args[1].([]string)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		var arg3 int
		if args[3] != nil {
			arg3 = args[3].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockItemRepo_FindByItemIDs_Call) Return(listItemResult *ListItemResult, err error) *MockItemRepo_FindByItemIDs_Call {
	_c.Call.Return(listItemResult, err)
	return _c
}

func (_c *MockItemRepo_FindByItemIDs_Call) RunAndReturn(run func(ctx context.Context, itemIDs []string, limit int, offset int) (*ListItemResult, error)) *MockItemRepo_FindByItemIDs_Call {
	_c.Call.Return(run)
	return _c
}
